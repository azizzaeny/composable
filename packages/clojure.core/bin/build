#!/usr/bin/env node

var fs = require('fs');

function extractCode(markdown){
  let regex = /```(\w+)((?:\s+\w+=[\w./]+)*)\s*([\s\S]*?)```/g;
  function extractParams(paramsString){
    if(paramsString){
      return paramsString.split(/\s+/).reduce((acc, params)=>{
        let [key, value] = params.split('=');
        if(key && value){
          acc[key] = isNaN(value) ? value : parseInt(value);
        }     
        return acc;
      }, {});
    }
    return {};
  }
  return [...markdown.matchAll(regex)].reduce((acc, match) => {
    let lang         = match[1];
    let paramsString = match[2];
    let code         = match[3].trim();
    let params       = extractParams(paramsString);
    return acc.concat({
      ...params,
      lang,
      code
    });
  }, []);
}

function groupByPath(extracted){
  return extracted.reduce((acc, value)=>{
    if(!acc[value['path']]){
      acc[value['path']] = value['code'];
    }else{
      acc[value['path']] = acc[value['path']].concat('\n\n', value['code'])
    }
    return acc;
  }, {})
}

var files = [
  './readme.md',
  './01.objects.md',
  './02.collections.md',
  './03.functions.md',
  './04.checks.md',
  './05.maths.md',
  './06.strings.md',
  //'./07.atom.md'
];

var bundle = files.map((file) => fs.readFileSync(file, 'utf8')).join('\n');
var code = extractCode(bundle).filter(c => (c.path !== undefined || c.path !== null))
var [usage, exports, ...restCode] = code;
var blocks = restCode.concat(exports);
var groupFile = groupByPath(blocks);
var writeOut = Object.entries(groupFile).map(([file, contents]) => ((file) ? fs.writeFileSync(file, contents, { flag: 'w+'}) : file, file))

console.log('written files:', writeOut.length, writeOut.join(' '));
